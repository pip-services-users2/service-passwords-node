import { ConfigParams } from 'pip-services3-commons-nodex';
import { IConfigurable } from 'pip-services3-commons-nodex';
import { IReferences } from 'pip-services3-commons-nodex';
import { IReferenceable } from 'pip-services3-commons-nodex';
import { ICommandable } from 'pip-services3-commons-nodex';
import { CommandSet } from 'pip-services3-commons-nodex';
import { UserPasswordInfoV1 } from '../data/version1/UserPasswordInfoV1';
import { IPasswordsController } from './IPasswordsController';
export declare class PasswordsController implements IConfigurable, IReferenceable, ICommandable, IPasswordsController {
    private static _defaultConfig;
    private _dependencyResolver;
    private _messageResolver;
    private _logger;
    private _persistence;
    private _activitiesClient;
    private _activitiesConnector;
    private _messageDistributionClient;
    private _messageConnector;
    private _commandSet;
    private _lockTimeout;
    private _attemptTimeout;
    private _attemptCount;
    private _recExpireTimeout;
    private _lockEnabled;
    private _magicCode;
    private _code_length;
    private _maxPasswordLen;
    private _minPasswordLen;
    private _oldPasswordsCheck;
    private _oldPasswordsCount;
    configure(config: ConfigParams): void;
    setReferences(references: IReferences): void;
    getCommandSet(): CommandSet;
    private generateVerificationCode;
    private hashPassword;
    private addOldPassword;
    private verifyPassword;
    validatePasswordForUser(correlationId: string, userId: string, password: string): Promise<void>;
    private readUserPassword;
    validatePassword(correlationId: string, password: string): Promise<void>;
    getPasswordInfo(correlationId: string, userId: string): Promise<UserPasswordInfoV1>;
    setPassword(correlationId: string, userId: string, password: string): Promise<void>;
    private geterateRandomPassword;
    setTempPassword(correlationId: string, userId: string): Promise<string>;
    deletePassword(correlationId: string, userId: string): Promise<void>;
    authenticate(correlationId: string, userId: string, password: string): Promise<boolean>;
    changePassword(correlationId: string, userId: string, oldPassword: string, newPassword: string): Promise<void>;
    validateCode(correlationId: string, userId: string, code: string): Promise<boolean>;
    resetPassword(correlationId: string, userId: string, code: string, password: string): Promise<void>;
    recoverPassword(correlationId: string, userId: string): Promise<void>;
}
